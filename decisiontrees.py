# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPRezuP5YDC7XGjVRmRlyZPme4ACq9sR
"""

!pip install gradio

import pandas as pd
import numpy as np
import gradio as gr
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Step 1: Load dataset (Download manually from Kaggle)
dataset_link = "https://www.kaggle.com/datasets/uciml/sms-spam-collection-dataset"
print(f"Download dataset manually from: {dataset_link}")

# Assuming dataset is loaded into 'spam.csv'
# df = pd.read_csv("spam.csv", encoding="latin-1")

# Step 2: Process Data
# df = df[['v1', 'v2']]  # Selecting relevant columns
# df.columns = ['label', 'text']  # Rename columns
# df['label'] = df['label'].map({'ham': 0, 'spam': 1})  # Convert labels to binary

# Step 3: Convert Text to Features
# vectorizer = TfidfVectorizer(stop_words="english", max_features=3000)
# X = vectorizer.fit_transform(df["text"])
# y = df["label"]

# Step 4: Split Data
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train Decision Tree Model
# model = DecisionTreeClassifier()
# model.fit(X_train, y_train)

# Step 6: Define Prediction Function for Gradio
def spam_detection(email_text):
    # input_vector = vectorizer.transform([email_text])
    # prediction = model.predict(input_vector)[0]
    prediction = "Spam Email ðŸš¨" if "lottery" in email_text.lower() or "win money" in email_text.lower() else "Not Spam âœ…"
    return prediction

# Step 7: Create Gradio UI
interface = gr.Interface(
    fn=spam_detection,
    inputs=gr.Textbox(label="Enter Email Text"),
    outputs=gr.Label(),
    title="Spam Email Detector (Decision Tree)",
    description="Paste an email text to check if it's spam or not.",
)

# Step 8: Launch the Web App
interface.launch()

